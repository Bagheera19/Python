#*------------------------------NUMPY_PYTHON-------------------------------*

#Author :- Bagheera19
#Date   :- 2/12/2022
#Time   :- 11.16 AM
#-------------------------------------------------------------------------

import numpy as np
print("*------------------------NUMPY_OPERATION------------------------*")
a = np.array([[1,2,3],[4,5,6],[7,8,9]])
print("A = \n",a)
b = np.array([[9,8,7],[6,5,4],[3,2,1]])
print("B = \n",b)
c = np.array([1,2,3,4,5,6,7,8,9,10])
print("C = \n",c)
d = np.array([[1,],[2,],[3,],[4,]])
print("D = \n",d)
print("------------------------------------------------------------------")

print("A + B =\n",a+b)
print("A - B =\n",a-b)
print("A * B =\n",a*b)             # direct element multiplication (a11 * b11)
print("A / B =\n",a/b)
print("------------------------------------------------------------------")

print("[A]*[B] = \n",np.dot(a,b));print()    # proper row to column multiplication (a11*b11+a12*b21+a13*b31 = 30)

print("Sum of elements of A = \n",np.sum(a))   # Sum of elements of A
print("Sum of elements of A Column wise = \n",np.sum(a,axis = 0))  #Sum of elements of A Column wise
print("Sum of elements of A Row wise = \n",np.sum(a,axis = 1));print()  #Sum of elements of A Row wise
print("------------------------------------------------------------------")

print("Mean of Matrix A = ",np.mean(a))     # sum/total number of elements  45/9 = 5.0
print("Mean of Matrix A column wise = ",np.mean(a,axis = 0)) # sum of element in each col /total number of elements in col 12/3 = 4.0
print("Mean of Matrix A row wise = ",np.mean(a,axis = 1));print() # sum of element in each row /total number of elements in row 6/3 = 2.0
print("------------------------------------------------------------------")

print("Median of A = ",np.median(a))                 # finds the middle value of matrix
print("Median of A = ",np.median(a,axis = 0))        # finds the middle value of col wise of a matrix
print("Median of A = ",np.median(a,axis = 1));print()        # finds the middle value of row wise of a matrix
print("------------------------------------------------------------------")

print("D matrix using vstack = \n",np.hstack(d))      # make vertical matrix into horizontal matrix
print("C matrix using hstack = \n",np.vstack(c));print()      # make horizontal matrix into vertical matrix
print("------------------------------------------------------------------")

print("Transpose of matrix A = \n",np.transpose(a));print()     # transpose row to column
print("------------------------------------------------------------------")

print("Matrix A (using flip)=\n",np.flip(a))            # print last to first
print("Matrix D (using flip)=\n",np.flip(d));print()
print("------------------------------------------------------------------")

smartix  = np.arange(1,21).reshape(4,5)                # arange take value from 1 to 20 and reshape make matrix into row 4*5 col
print(smartix);print()
print("------------------------------------------------------------------")

#slicing of array
Lmatrix = np.arange(20).reshape(4,5)                  # arange takes value from 0 to 19, 20 is excluded
print("Lmatrix = \n",Lmatrix);print()
print("------------------------------------------------------------------")

print("Matrix from row 1 to 2 and col 1 to 3 = \n",Lmatrix[1:3,1:4]);print()
print("Matrix from row 0 to 2 = \n",Lmatrix[ :3]),;print()
print("Matrix whole row and col starting to 2 = \n",Lmatrix[ : , :3]);print()
print("Matrix from row 0 to -1 and col 0 to -1 = \n",Lmatrix[ :-1, :-1]);print()

# we can use negative sign from last --> -1 ,second last --> -2
print("------------------------------------------------------------------")

#some mis. operations

print("Matrix element only divided by 5 = \n",Lmatrix[Lmatrix%5 == 0]);print()
print("Matrix element only which are greater than 14 = \n",Lmatrix[Lmatrix>13]);print()

print("------------------------------END------------------------------------")

a= np.arange(50).reshape(5,10)                                 #<------flip array by every row 
print(a)                                                       #and last row to 1st num
print("\n")
print("Flip Array in col wise")
print("\n")
b= np.flip(a,axis=1)
print(b)

#------------------------------------OUTPUT------------------------------------------------


*------------------------NUMPY_OPERATION------------------------*
A = 
 [[1 2 3]
 [4 5 6]
 [7 8 9]]
B = 
 [[9 8 7]
 [6 5 4]
 [3 2 1]]
C = 
 [ 1  2  3  4  5  6  7  8  9 10]
D = 
 [[1]
 [2]
 [3]
 [4]]
------------------------------------------------------------------
A + B =
 [[10 10 10]
 [10 10 10]
 [10 10 10]]
A - B =
 [[-8 -6 -4]
 [-2  0  2]
 [ 4  6  8]]
A * B =
 [[ 9 16 21]
 [24 25 24]
 [21 16  9]]
A / B =
 [[0.11111111 0.25       0.42857143]
 [0.66666667 1.         1.5       ]
 [2.33333333 4.         9.        ]]
------------------------------------------------------------------
[A]*[B] = 
 [[ 30  24  18]
 [ 84  69  54]
 [138 114  90]]

Sum of elements of A = 
 45
Sum of elements of A Column wise = 
 [12 15 18]
Sum of elements of A Row wise = 
 [ 6 15 24]

------------------------------------------------------------------
Mean of Matrix A =  5.0
Mean of Matrix A column wise =  [4. 5. 6.]
Mean of Matrix A row wise =  [2. 5. 8.]

------------------------------------------------------------------
Median of A =  5.0
Median of A =  [4. 5. 6.]
Median of A =  [2. 5. 8.]

------------------------------------------------------------------
D matrix using vstack = 
 [1 2 3 4]
C matrix using hstack = 
 [[ 1]
 [ 2]
 [ 3]
 [ 4]
 [ 5]
 [ 6]
 [ 7]
 [ 8]
 [ 9]
 [10]]

------------------------------------------------------------------
Transpose of matrix A = 
 [[1 4 7]
 [2 5 8]
 [3 6 9]]

------------------------------------------------------------------
Matrix A (using flip)=
 [[9 8 7]
 [6 5 4]
 [3 2 1]]
Matrix D (using flip)=
 [[4]
 [3]
 [2]
 [1]]

------------------------------------------------------------------
[[ 1  2  3  4  5]
 [ 6  7  8  9 10]
 [11 12 13 14 15]
 [16 17 18 19 20]]

------------------------------------------------------------------
Lmatrix = 
 [[ 0  1  2  3  4]
 [ 5  6  7  8  9]
 [10 11 12 13 14]
 [15 16 17 18 19]]

------------------------------------------------------------------
Matrix from row 1 to 2 and col 1 to 3 = 
 [[ 6  7  8]
 [11 12 13]]

Matrix from row 0 to 2 = 
 [[ 0  1  2  3  4]
 [ 5  6  7  8  9]
 [10 11 12 13 14]]

Matrix whole row and col starting to 2 = 
 [[ 0  1  2]
 [ 5  6  7]
 [10 11 12]
 [15 16 17]]

Matrix from row 0 to -1 and col 0 to -1 = 
 [[ 0  1  2  3]
 [ 5  6  7  8]
 [10 11 12 13]]

------------------------------------------------------------------
Matrix element only divided by 5 = 
 [ 0  5 10 15]

Matrix element only which are greater than 14 = 
 [14 15 16 17 18 19]

------------------------------END------------------------------------


